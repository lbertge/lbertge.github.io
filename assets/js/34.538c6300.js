(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{130:function(t,e,a){"use strict";a.r(e);var s=a(12),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"复杂的玩具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂的玩具","aria-hidden":"true"}},[t._v("#")]),t._v(" 复杂的玩具")]),t._v(" "),a("h2",{attrs:{id:"don-t-make-neural-nets-for-everything"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#don-t-make-neural-nets-for-everything","aria-hidden":"true"}},[t._v("#")]),t._v(" Don't make neural nets for everything")]),t._v(" "),a("p",[t._v("Let's take a look at a "),a("a",{attrs:{href:"https://blog.openai.com/requests-for-research-2/",target:"_blank",rel:"noopener noreferrer"}},[t._v("toy problem"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("blockquote",[a("p",[t._v("⭐ Train an LSTM to solve the XOR problem: that is, given a sequence of bits, determine its parity. The LSTM should consume the sequence, one bit at a time, and then output the correct answer at the sequence’s end. Test the two approaches below:")]),t._v(" "),a("p",[t._v("Generate a dataset of random 100,000 binary strings of length 50. Train the LSTM; what performance do you get?")]),t._v(" "),a("p",[t._v("Generate a dataset of random 100,000 binary strings, where the length of each string is independently and randomly chosen between 1 and 50. Train the LSTM. Does it succeed? What explains the difference?")])]),t._v(" "),a("p",[t._v("First of all, let's establish that this is a trivial problem, so we remind ourselves that machine learning is not a cure-all solution:")]),t._v(" "),a("div",{staticClass:"language-python extra-class"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" numpy "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("as")]),t._v(" np\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("xor")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" np"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("sum")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("string"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n\nxor"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 0")]),t._v("\n")])])]),a("h2",{attrs:{id:"let-s-do-it-anyway-to-show-why-we-shouldn-t"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let-s-do-it-anyway-to-show-why-we-shouldn-t","aria-hidden":"true"}},[t._v("#")]),t._v(" Let's do it anyway to show why we shouldn't")])])},[],!1,null,null,null);e.default=n.exports}}]);